name: Integration Tests

on:
  workflow_dispatch:
  pull_request:
    branches: [main]
  merge_group:
    branches: [main]
    types: [checks_requested]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

env:
  TRITON_USE_ASSERT_ENABLED_LLVM: "TRUE"

jobs:
  Runner-Preparation:
    runs-on: ubuntu-latest
    outputs:
      matrix-required: ${{ steps.set-matrix.outputs.matrix-required }}
      matrix-optional: ${{ steps.set-matrix.outputs.matrix-optional }}
    steps:
      - name: Prepare runner matrix
        id: set-matrix
        run: |
          if [ x"${{ github.repository }}" == x"openai/triton" ]; then
            echo '::set-output name=matrix-required::[["self-hosted", "A100"], ["self-hosted", "H100"]]'
            echo '::set-output name=matrix-optional::[]'
          else
            echo '::set-output name=matrix-required::["ubuntu-latest"]'
            echo '::set-output name=matrix-optional::["ubuntu-latest"]'
          fi

  Integration-Tests-Nvidia:
    needs: Runner-Preparation

    runs-on: ${{ matrix.runner }}

    strategy:
      matrix:
        runner: ${{fromJson(needs.Runner-Preparation.outputs.matrix-required)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set CUDA ENV
        if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'V100' || matrix.runner[1] == 'A100' || matrix.runner[1] == 'H100')}}
        run: |
          echo "BACKEND=CUDA" >> "${GITHUB_ENV}"
          echo "ENABLE_TMA=0" >> "${GITHUB_ENV}"
          echo "ENABLE_MMA_V3=0" >> "${GITHUB_ENV}"
          echo "TRITON_DISABLE_LINE_INFO=1" >> "${GITHUB_ENV}"

      - name: Clear cache
        run: |
          rm -rf ~/.triton

      - name: Update PATH
        run: |
          echo "PATH=${HOME}/.local/bin:${PATH}" >> "${GITHUB_ENV}"

      - name: Install Triton
        if: ${{ env.BACKEND == 'CUDA'}}
        run: |
          cd python
          python3 -m pip install --upgrade pip
          python3 -m pip install cmake==3.24
          python3 -m pip install --no-build-isolation -vvv '.[tests]'
          python3 -m pip install pytest-xdist

      - name: Run lit tests
        if: ${{ env.BACKEND == 'CUDA'}}
        run: |
          python3 -m pip install lit
          cd python
          LIT_TEST_DIR="build/$(ls build | grep -i cmake)/test"
          if [ ! -d "${LIT_TEST_DIR}" ]; then
            echo "Coult not find '${LIT_TEST_DIR}'" ; exit -1
          fi
          lit -v "${LIT_TEST_DIR}"

      - name: Enable MMAV3 and TMA
        if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'H100')}}
        run: |
          echo "ENABLE_TMA=1" >> "${GITHUB_ENV}"
          echo "ENABLE_MMA_V3=1" >> "${GITHUB_ENV}"

      - name: Run python tests on CUDA with ENABLE_TMA=1 and ENABLE_MMA_V3=1
        if: ${{ env.BACKEND == 'CUDA' && env.ENABLE_TMA == '1' && env.ENABLE_MMA_V3 == '1'}}
        run: |
          cd python/test/unit
          python3 -m pytest -n 8 --ignore=runtime --ignore=operators --ignore=language/test_line_info.py
          # run runtime tests serially to avoid race condition with cache handling.
          python3 -m pytest runtime/
          # run test_line_info.py separately with TRITON_DISABLE_LINE_INFO=0
          TRITON_DISABLE_LINE_INFO=0 python3 -m pytest language/test_line_info.py

      - name: Run python tests on CUDA with ENABLE_TMA=0 and ENABLE_MMA_V3=0
        if: ${{ env.BACKEND == 'CUDA' && env.ENABLE_TMA == '0' && env.ENABLE_MMA_V3 == '0'}}
        run: |
          cd python/test/unit
          python3 -m pytest -n 8 --ignore=runtime --ignore=hopper --ignore=operators --ignore=language/test_line_info.py
          # run runtime tests serially to avoid race condition with cache handling.
          python3 -m pytest runtime/
          # run test_line_info.py separately with TRITON_DISABLE_LINE_INFO=0
          TRITON_DISABLE_LINE_INFO=0 python3 -m pytest language/test_line_info.py

      - name: Clear cache
        run: |
          rm -rf ~/.triton

      - name: Run partial tests on CUDA with ENABLE_TMA=1 and ENABLE_MMA_V3=1
        if: ${{ env.BACKEND == 'CUDA' && env.ENABLE_TMA == '1' && env.ENABLE_MMA_V3 == '1'}}
        run: |
          cd python/test/unit
          python3 -m pytest -n 8 operators

      - name: Run partial tests on CUDA with ENABLE_TMA=0 and ENABLE_MMA_V3=0
        if: ${{ env.BACKEND == 'CUDA' && env.ENABLE_TMA == '0' && env.ENABLE_MMA_V3 == '0'}}
        run: |
          cd python/test/unit
          python3 -m pytest -n 8 operators

      - name: Create artifacts archive
        if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'V100' || matrix.runner[1] == 'A100' || matrix.runner[1] == 'H100')}}
        run: |
          cd ~/.triton
          tar -czf artifacts.tar.gz cache

      - name: Save PR number to file
        run: echo ${{ github.event.pull_request.number }} > pr-number.txt

      - name: Upload artifacts archive
        if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'V100' || matrix.runner[1] == 'A100' || matrix.runner[1] == 'H100')}}
        uses: actions/upload-artifact@v2
        with:
          name: artifacts ${{ matrix.runner[1] }}
          path: ~/.triton/artifacts.tar.gz

      - name: Upload PR number artifact
        if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'V100' || matrix.runner[1] == 'A100' || matrix.runner[1] == 'H100')}}
        uses: actions/upload-artifact@v2
        with:
          name: pr-number
          path: pr-number.txt

      - name: Run CXX unittests
        if: ${{ env.BACKEND == 'CUDA'}}
        run: |
          cd python
          cd "build/$(ls build | grep -i cmake)"
          ctest

      - name: Regression tests
        if: ${{ contains(matrix.runner, 'A100') }}
        run: |
          python3 -m pip install pytest-rerunfailures
          cd python/test/regression
          sudo nvidia-smi -i 0 -pm 1
          sudo nvidia-smi -i 0 --lock-gpu-clocks=1280,1280
          python3 -m pytest -vs . --reruns 10
          sudo nvidia-smi -i 0 -rgc

  Integration-Tests-Third-Party:
    needs: Runner-Preparation
    if: false

    runs-on: ${{ matrix.runner }}

    strategy:
      matrix:
        runner: ${{fromJson(needs.Runner-Preparation.outputs.matrix-optional)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set ROCM ENV
        if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'gfx908')}}
        run: |
          echo "BACKEND=ROCM" >> "${GITHUB_ENV}"

      - name: Set XPU ENV
        if: ${{(matrix.runner[0] == 'self-hosted') && (matrix.runner[1] == 'arc770')}}
        run: |
          echo "BACKEND=XPU" >> "${GITHUB_ENV}"

      - name: Clear cache
        run: |
          rm -rf ~/.triton

      - name: Update PATH
        run: |
          echo "PATH=${HOME}/.local/bin:${PATH}" >> "${GITHUB_ENV}"

      - name: Check pre-commit
        if: ${{ matrix.runner != 'macos-10.15' && (matrix.runner[1] != 'arc770') }}
        run: |
          python3 -m pip install --upgrade pre-commit
          python3 -m pre_commit run --all-files --verbose

      - name: Check pre-commit arc770
        if: ${{ matrix.runner != 'macos-10.15' && (matrix.runner[1] == 'arc770') }}
        run: |
          source ${HOME}/triton_vars.sh
          source ${HOME}/miniconda3/bin/activate
          conda activate triton-xpu-ci
          python3 -m pip install --upgrade pre-commit
          python3 -m pre_commit run --all-files

      - name: Install Triton on ROCM
        if: ${{ env.BACKEND == 'ROCM'}}
        run: |
          cd python
          python3 -m pip install --upgrade pip
          python3 -m pip install cmake==3.24
          python3 -m pip install torch==1.13.1 --index-url https://download.pytorch.org/whl/rocm5.2
          python3 -m pip install --no-build-isolation -vvv '.[tests]'

      - name: Install Triton on XPU
        if: ${{ env.BACKEND == 'XPU'}}
        run: |
          source ${HOME}/triton_vars.sh
          source ${HOME}/miniconda3/bin/activate
          conda activate triton-xpu-ci
          git submodule update --init --recursive
          cd python
          python3 -m pip install --upgrade pip
          python3 -m pip install cmake==3.24
          export TRITON_CODEGEN_INTEL_XPU_BACKEND=1
          python3 -m pip uninstall -y triton
          python3 setup.py build
          python3 -m pip install --no-build-isolation -vvv '.[tests]'

      - name: Run python tests on ROCM
        if: ${{ env.BACKEND == 'ROCM'}}
        run: |
          cd python/test/unit/language
          python3 -m pytest --capture=tee-sys -rfs --verbose "test_core.py::test_empty_kernel"

      - name: Run python tests on XPU
        if: ${{ env.BACKEND == 'XPU'}}
        run: |
          source ${HOME}/triton_vars.sh
          source ${HOME}/miniconda3/bin/activate
          conda activate triton-xpu-ci
          cd python/test/backend/third_party_backends
          python3 -m pytest --capture=tee-sys -rfs --verbose --backend xpu
