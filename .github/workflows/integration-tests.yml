name: Integration Tests

on:
  workflow_dispatch:
  pull_request:
    branches:
      - triton-mlir

jobs:

  Integration-Tests:

    runs-on: [self-hosted, A10]

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Clear cache
        run: |
          rm -r ~/.triton/cache/
        continue-on-error: true

      - name: Check imports
        run: |
          pip install isort
          isort -c ./python || ( echo '::error title=Imports not sorted::Please run \"isort ./python\"' ; exit 1 )

      - name: Check python style
        run: |
          pip install autopep8
          autopep8 -a -r -d --exit-code ./python || ( echo '::error title=Style issues::Please run \"autopep8 -a -r -i ./python\"' ; exit 1 )

      - name: Check cpp style
        run: |
          sudo apt-get install -y clang-format
          find . -regex '.*\.\(cpp\|hpp\|h\|cc\)' -not -path "./python/build/*" -not -path "./include/triton/external/*" -print0 | xargs -0 -n1 clang-format -style=file --dry-run -Werror -i ||
          (echo '::error title=Style issues:: Please run `find . -regex ".*\.\(cpp\|hpp\|h\|cc\)" -not -path "./python/build/*" -not -path "./include/triton/external/*" -print0 | xargs -0 -n1 clang-format -style=file -i`' ; exit 1)

      - name: Flake8
        run: |
          pip install flake8
          flake8 --config ./python/setup.cfg ./python || ( echo '::error::Flake8 failed; see logs for errors.' ; exit 1 )

      - name: Install Triton
        run: |
          alias python='python3'
          cd python
          TRITON_USE_ASSERT_ENABLED_LLVM=TRUE pip3 install -e '.[tests]'

      - name: Run lit tests
        run: |
          cd python
          LIT_TEST_DIR="build/$(ls build)/test"
          if [ ! -d "$LIT_TEST_DIR" ]; then
            echo "Not found `$LIT_TEST_DIR`.  Did you change an installation method?" ; exit -1
          fi
          lit -v "$LIT_TEST_DIR"

      - name: Run python tests
        run: |
          cd python/tests
          pytest

      - name: Run CXX unittests
        run: |
          cd python/
          cd "build/$(ls build)"
          ctest
