from enum import IntEnum
from typing import List, Optional

NONE: CACHE_MODIFIER
CA: CACHE_MODIFIER
CG: CACHE_MODIFIER

NORMAL: EVICTION_POLICY
EVICT_FIRST: EVICTION_POLICY
EVICT_LAST: EVICTION_POLICY

class ATOMIC_OP(IntEnum):
    AND = 1
    OR = 2
    XOR = 3
    ADD = 4
    FADD = 5
    MAX = 6
    MIN = 7
    UMAX = 8
    UMIN = 9
    XCHG = 10

class CACHE_MODIFIER(IntEnum):
    NONE = 1
    CA = 2
    CG = 3

class ConditionOp(OpState):
    def __init__(self, *args, **kwargs) -> None: ...

class EVICTION_POLICY(IntEnum):
    NORMAL = 1
    EVICT_FIRST = 2
    EVICT_LAST = 3

class ForOp(OpState):
    def __init__(self, *args, **kwargs) -> None: ...
    def get_induction_var(self) -> value: ...

class IfOp(OpState):
    def __init__(self, *args, **kwargs) -> None: ...
    def get_else_block(self) -> block: ...
    def get_else_yield(self, *args, **kwargs) -> YieldOp: ...
    def get_then_block(self) -> block: ...
    def get_then_yield(self, *args, **kwargs) -> YieldOp: ...

class InsertPoint:
    def __init__(self, *args, **kwargs) -> None: ...

class OpState:
    def __init__(self, *args, **kwargs) -> None: ...
    def append_operand(self, arg0: value) -> None: ...
    def dump(self) -> None: ...
    def get_body(self, arg0: int) -> block: ...
    def get_num_results(self) -> int: ...
    def get_region(self, arg0: int) -> region: ...
    def get_result(self, arg0: int) -> value: ...
    def set_attr(self, arg0: str, arg1: attribute) -> None: ...
    def verify(self) -> bool: ...

class REDUCE_OP(IntEnum):
    ADD = 1
    FADD = 2
    MIN = 3
    MAX = 4
    UMIN = 5
    UMAX = 6
    ARGMIN = 7
    ARGMAX = 8
    ARGUMIN = 9
    ARGUMAX = 10
    FMIN = 11
    FMAX = 12
    ARGFMIN = 13
    ARGFMAX = 14
    XOR = 15

class WhileOp(OpState):
    def __init__(self, *args, **kwargs) -> None: ...
    def get_after(self) -> region: ...
    def get_before(self) -> region: ...

class YieldOp(OpState):
    def __init__(self, *args, **kwargs) -> None: ...

class attribute:
    def __init__(self, *args, **kwargs) -> None: ...

class block:
    def __init__(self, *args, **kwargs) -> None: ...
    def add_argument(self, arg0: type) -> None: ...
    def arg(self, arg0: int) -> block_argument: ...
    def dump(self) -> None: ...
    def erase(self) -> None: ...
    def get_num_arguments(self) -> int: ...
    def get_parent(self) -> region: ...
    def has_terminator(self) -> bool: ...
    def insert_before(self, arg0: block) -> None: ...
    def merge_block_before(self, arg0: block) -> None: ...
    def move_before(self, arg0: block) -> None: ...
    def replace_use_in_block_with(self, arg0: value, arg1: value) -> None: ...

class block_argument(value):
    def __init__(self, *args, **kwargs) -> None: ...

class bool_attr(attribute):
    def __init__(self, *args, **kwargs) -> None: ...

class builder:
    def __init__(self, arg0: context) -> None: ...
    def call(self, arg0: function, arg1: List[value]) -> OpState: ...
    def create_add(self, arg0: value, arg1: value) -> value: ...
    def create_addptr(self, arg0: value, arg1: value) -> value: ...
    def create_and(self, arg0: value, arg1: value) -> value: ...
    def create_ashr(self, arg0: value, arg1: value) -> value: ...
    def create_assert(self, arg0: value, arg1: str, arg2: str, arg3: str, arg4: int) -> None: ...
    def create_atomic_cas(self, arg0: value, arg1: value, arg2: value) -> value: ...
    def create_atomic_rmw(self, arg0: ATOMIC_OP, arg1: value, arg2: value, arg3: value) -> value: ...
    def create_barrier(self) -> None: ...
    def create_bitcast(self, arg0: value, arg1: type) -> value: ...
    def create_block(self) -> block: ...
    def create_block_with_parent(self, arg0: region, arg1: List[type]) -> block: ...
    def create_branch(self, arg0: block, arg1: List[value]) -> None: ...
    def create_broadcast(self, arg0: value, arg1: List[int]) -> value: ...
    def create_cat(self, arg0: value, arg1: value) -> value: ...
    def create_cond_branch(self, arg0: value, arg1: block, arg2: block) -> None: ...
    def create_condition_op(self, arg0: value, arg1: List[value]) -> ConditionOp: ...
    def create_cos(self, arg0: value) -> value: ...
    def create_dot(self, arg0: value, arg1: value, arg2: value, arg3: bool) -> value: ...
    def create_exp(self, arg0: value) -> value: ...
    def create_expand_dims(self, arg0: value, arg1: int) -> value: ...
    def create_external_elementwise(self, arg0: str, arg1: str, arg2: str, arg3: List[value], arg4: type) -> value: ...
    def create_fabs(self, arg0: value) -> value: ...
    def create_fadd(self, arg0: value, arg1: value) -> value: ...
    def create_fcmpOEQ(self, arg0: value, arg1: value) -> value: ...
    def create_fcmpOGE(self, arg0: value, arg1: value) -> value: ...
    def create_fcmpOGT(self, arg0: value, arg1: value) -> value: ...
    def create_fcmpOLE(self, arg0: value, arg1: value) -> value: ...
    def create_fcmpOLT(self, arg0: value, arg1: value) -> value: ...
    def create_fcmpONE(self, arg0: value, arg1: value) -> value: ...
    def create_fcmpUEQ(self, arg0: value, arg1: value) -> value: ...
    def create_fcmpUGE(self, arg0: value, arg1: value) -> value: ...
    def create_fcmpUGT(self, arg0: value, arg1: value) -> value: ...
    def create_fcmpULE(self, arg0: value, arg1: value) -> value: ...
    def create_fcmpULT(self, arg0: value, arg1: value) -> value: ...
    def create_fcmpUNE(self, arg0: value, arg1: value) -> value: ...
    def create_fdiv(self, arg0: value, arg1: value) -> value: ...
    def create_fmul(self, arg0: value, arg1: value) -> value: ...
    def create_for_op(self, arg0: value, arg1: value, arg2: value, arg3: List[value]) -> ForOp: ...
    def create_fp_ext(self, arg0: value, arg1: type) -> value: ...
    def create_fp_to_fp(self, arg0: value, arg1: type) -> value: ...
    def create_fp_to_si(self, arg0: value, arg1: type) -> value: ...
    def create_fp_to_ui(self, arg0: value, arg1: type) -> value: ...
    def create_fp_trunc(self, arg0: value, arg1: type) -> value: ...
    def create_frem(self, arg0: value, arg1: value) -> value: ...
    def create_fsub(self, arg0: value, arg1: value) -> value: ...
    def create_get_num_programs(self, arg0: int) -> value: ...
    def create_get_program_id(self, arg0: int) -> value: ...
    def create_iabs(self, arg0: value) -> value: ...
    def create_icmpEQ(self, arg0: value, arg1: value) -> value: ...
    def create_icmpNE(self, arg0: value, arg1: value) -> value: ...
    def create_icmpSGE(self, arg0: value, arg1: value) -> value: ...
    def create_icmpSGT(self, arg0: value, arg1: value) -> value: ...
    def create_icmpSLE(self, arg0: value, arg1: value) -> value: ...
    def create_icmpSLT(self, arg0: value, arg1: value) -> value: ...
    def create_icmpUGE(self, arg0: value, arg1: value) -> value: ...
    def create_icmpUGT(self, arg0: value, arg1: value) -> value: ...
    def create_icmpULE(self, arg0: value, arg1: value) -> value: ...
    def create_icmpULT(self, arg0: value, arg1: value) -> value: ...
    def create_if_op(self, arg0: List[type], arg1: value, arg2: bool) -> IfOp: ...
    def create_index_to_si(self, arg0: value) -> value: ...
    def create_int_cast(self, arg0: value, arg1: type, arg2: bool) -> value: ...
    def create_int_to_ptr(self, arg0: value, arg1: type) -> value: ...
    def create_load(self, arg0: value, arg1: CACHE_MODIFIER, arg2: EVICTION_POLICY, arg3: bool) -> value: ...
    def create_log(self, arg0: value) -> value: ...
    def create_lshr(self, arg0: value, arg1: value) -> value: ...
    def create_make_range(self, arg0: int, arg1: int) -> value: ...
    def create_masked_load(self, arg0: value, arg1: value, arg2: Optional[value], arg3: CACHE_MODIFIER, arg4: EVICTION_POLICY, arg5: bool) -> value: ...
    def create_masked_store(self, arg0: value, arg1: value, arg2: value, arg3: CACHE_MODIFIER, arg4: EVICTION_POLICY) -> None: ...
    def create_module(self) -> module: ...
    def create_mul(self, arg0: value, arg1: value) -> value: ...
    def create_or(self, arg0: value, arg1: value) -> value: ...
    def create_print(self, arg0: str, arg1: List[value]) -> None: ...
    def create_ptr_to_int(self, arg0: value, arg1: type) -> value: ...
    def create_reduce(self, arg0: value, arg1: REDUCE_OP, arg2: int) -> value: ...
    def create_sdiv(self, arg0: value, arg1: value) -> value: ...
    def create_select(self, arg0: value, arg1: value, arg2: value) -> value: ...
    def create_shl(self, arg0: value, arg1: value) -> value: ...
    def create_si_to_fp(self, arg0: value, arg1: type) -> value: ...
    def create_sin(self, arg0: value) -> value: ...
    def create_splat(self, arg0: value, arg1: List[int]) -> value: ...
    def create_sqrt(self, arg0: value) -> value: ...
    def create_srem(self, arg0: value, arg1: value) -> value: ...
    def create_store(self, arg0: value, arg1: value, arg2: CACHE_MODIFIER, arg3: EVICTION_POLICY) -> None: ...
    def create_sub(self, arg0: value, arg1: value) -> value: ...
    def create_to_index(self, arg0: value) -> value: ...
    def create_trans(self, arg0: value) -> value: ...
    def create_udiv(self, arg0: value, arg1: value) -> value: ...
    def create_ui_to_fp(self, arg0: value, arg1: type) -> value: ...
    def create_undef(self, arg0: type) -> value: ...
    def create_urem(self, arg0: value, arg1: value) -> value: ...
    def create_view(self, arg0: value, arg1: List[int]) -> value: ...
    def create_while_op(self, arg0: List[type], arg1: List[value]) -> WhileOp: ...
    def create_xor(self, arg0: value, arg1: value) -> value: ...
    def create_yield_op(self, arg0: List[value]) -> YieldOp: ...
    def get_all_ones_value(self, arg0: type) -> value: ...
    def get_bf16(self, arg0: float) -> value: ...
    def get_bf16_ty(self) -> type: ...
    def get_block_ty(self, arg0: type, arg1: List[int]) -> type: ...
    def get_bool_attr(self, arg0: bool) -> bool_attr: ...
    def get_double_ty(self) -> type: ...
    def get_float_ty(self) -> type: ...
    def get_fp16(self, arg0: float) -> value: ...
    def get_fp32(self, arg0: float) -> value: ...
    def get_fp64(self, arg0: float) -> value: ...
    def get_fp8e4_ty(self) -> type: ...
    def get_fp8e5_ty(self) -> type: ...
    def get_function_ty(self, arg0: List[type], arg1: List[type]) -> type: ...
    def get_half_ty(self) -> type: ...
    def get_insertion_block(self) -> block: ...
    def get_insertion_point(self) -> InsertPoint: ...
    def get_int1(self, arg0: bool) -> value: ...
    def get_int16(self, arg0: int) -> value: ...
    def get_int16_ty(self) -> type: ...
    def get_int1_ty(self) -> type: ...
    def get_int32(self, arg0: int) -> value: ...
    def get_int32_attr(self, arg0: int) -> integer_attr: ...
    def get_int32_ty(self) -> type: ...
    def get_int64(self, arg0: int) -> value: ...
    def get_int64_ty(self) -> type: ...
    def get_int8(self, arg0: int) -> value: ...
    def get_int8_ty(self) -> type: ...
    def get_null_value(self, arg0: type) -> value: ...
    def get_or_insert_function(self, arg0: module, arg1: str, arg2: type, arg3: str) -> function: ...
    def get_ptr_ty(self, arg0: type, arg1: int) -> type: ...
    def get_void_ty(self) -> type: ...
    def new_block(self) -> block: ...
    def restore_insertion_point(self, arg0: InsertPoint) -> None: ...
    def ret(self, arg0: List[value]) -> None: ...
    def set_insertion_point_after(self, arg0) -> None: ...
    def set_insertion_point_to_end(self, arg0: block) -> None: ...
    def set_insertion_point_to_start(self, arg0: block) -> None: ...
    @property
    def context(self) -> context: ...

class context:
    def __init__(self) -> None: ...
    def load_triton(self) -> None: ...

class function(OpState):
    def __init__(self, *args, **kwargs) -> None: ...
    def add_entry_block(self) -> block: ...
    def args(self, arg0: int) -> block_argument: ...
    def reset_type(self, arg0: type) -> None: ...
    def set_arg_attr(self, arg0: int, arg1: str, arg2: int) -> None: ...
    @property
    def type(self) -> function_type: ...

class function_type:
    def __init__(self, *args, **kwargs) -> None: ...
    def param_types(self) -> List[type]: ...

class integer_attr(attribute):
    def __init__(self, *args, **kwargs) -> None: ...

class module(OpState):
    def __init__(self, *args, **kwargs) -> None: ...
    def dump(self) -> None: ...
    def get_function(self, *args, **kwargs) -> function: ...
    def get_single_function(self, *args, **kwargs) -> function: ...
    def has_function(self, arg0: str) -> bool: ...
    def push_back(self, arg0) -> None: ...
    def str(self) -> str: ...

class pass_manager:
    def __init__(self, arg0: context) -> None: ...
    def add_canonicalizer_pass(self) -> None: ...
    def add_convert_triton_to_tritongpu_pass(self, arg0: int) -> None: ...
    def add_cse_pass(self) -> None: ...
    def add_inliner_pass(self) -> None: ...
    def add_licm_pass(self) -> None: ...
    def add_sccp_pass(self) -> None: ...
    def add_scf_to_cfg(self) -> None: ...
    def add_symbol_dce_pass(self) -> None: ...
    def add_triton_combine_pass(self) -> None: ...
    def add_triton_gpu_to_llvm(self) -> None: ...
    def add_tritongpu_accelerate_matmul_pass(self, arg0: int) -> None: ...
    def add_tritongpu_coalesce_pass(self) -> None: ...
    def add_tritongpu_decompose_conversions_pass(self) -> None: ...
    def add_tritongpu_optimize_dot_operands_pass(self) -> None: ...
    def add_tritongpu_pipeline_pass(self, arg0: int) -> None: ...
    def add_tritongpu_prefetch_pass(self) -> None: ...
    def add_tritongpu_remove_layout_conversions_pass(self) -> None: ...
    def add_tritongpu_reorder_instructions_pass(self) -> None: ...
    def enable_debug(self) -> None: ...
    def run(self, arg0: module) -> None: ...

class region:
    def __init__(self, *args, **kwargs) -> None: ...
    def empty(self) -> bool: ...
    def get_parent_region(self) -> region: ...
    def size(self) -> int: ...

class type:
    def __init__(self, *args, **kwargs) -> None: ...
    def is_fp16(self) -> bool: ...
    def is_integer(self, arg0: int) -> bool: ...

class value:
    def __init__(self, *args, **kwargs) -> None: ...
    def get_context(self) -> context: ...
    def get_type(self) -> type: ...
    def replace_all_uses_with(self, arg0: value) -> None: ...
    def set_attr(self, arg0: str, arg1) -> None: ...

def make_attr(arg0: List[int], arg1: context) -> attribute: ...
def parse_mlir_module(arg0: str, arg1: context) -> module: ...
