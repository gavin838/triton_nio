from abc import ABC
from dataclasses import dataclass
from pathlib import Path
from typing import List, Optional

from .. import DEFAULT_TRACE_DIR
from ..parsers import C_CUDA_HeaderParser, HeaderParser
from .codegen import (
    C_CUDA_HeaderGenerator,
    C_CUDA_SourceGenerator,
    HeaderGenerator,
    SourceGenerator,
)


@dataclass
class AOTLinkerResult:
    header: str
    source: str
    header_path: str | Path
    source_path: str | Path


class AOTLinker(ABC):
    """Generates dispatcher code for compiled Triton kernels"""

    HEADER_PARSER_CLS: HeaderParser
    HEADER_GENERATOR_CLS: HeaderGenerator
    SOURCE_GENERATOR_CLS: SourceGenerator

    def __init__(
        self,
        kernel_name,
        headers: List[str],
        prefix: Optional[str] = "",
        save_dir=None,
    ):
        """
        Args
            headers: Paths to header files to link. **Must** include linker directive annotations (autogenerated by ttc)

        """
        self.kernel_name = kernel_name
        self.headers = headers
        # self.out_path = out_path if isinstance(out_path, Path) else Path(out_path)
        self.prefix = prefix
        self.trace_dir = save_dir or DEFAULT_TRACE_DIR
        # Parse headers for kernel linker metadata
        self.header_parser = self.HEADER_PARSER_CLS()
        kernels = self.header_parser.parse(self.headers)

        self.header_generator = self.HEADER_GENERATOR_CLS(kernels)
        self.source_generator = self.SOURCE_GENERATOR_CLS(kernels)

    def parse_headers(self):
        kernels = self.header_parser.parse(self.headers)

        return kernels

    def generate(self):
        header = self.header_generator.generate()
        source = self.source_generator.generate()
        header_path = self.trace_dir / f"{self.kernel_name}.h"
        source_path = self.trace_dir / f"{self.kernel_name}.c"
        with header_path.open("w") as fp:
            fp.write(header)
        with source_path.open("w") as fp:
            fp.write(source)

        return AOTLinkerResult(
            header=header,
            source=source,
            header_path=header_path,
            source_path=source_path,
        )


class AOT_C_CUDA_Linker(AOTLinker):
    """
    Subclass for C CUDA dispatcher code from compiled triton kernels
    """

    HEADER_PARSER_CLS = C_CUDA_HeaderParser
    HEADER_GENERATOR_CLS = C_CUDA_HeaderGenerator
    SOURCE_GENERATOR_CLS = C_CUDA_SourceGenerator
