module {
  func public @_fwd_kernel_0d1d2d34d5d6d7d8d9d10d11c12d13d14d15c16d17d18d19c20d21d22d23c242526d(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: f32, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg7: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32}, %arg9: i32 {tt.divisibility = 16 : i32}, %arg10: i32 {tt.divisibility = 16 : i32}, %arg11: i32 {tt.divisibility = 16 : i32}, %arg12: i32 {tt.divisibility = 16 : i32}, %arg13: i32 {tt.divisibility = 16 : i32}, %arg14: i32 {tt.divisibility = 16 : i32}, %arg15: i32 {tt.divisibility = 16 : i32}, %arg16: i32 {tt.divisibility = 16 : i32}, %arg17: i32 {tt.divisibility = 16 : i32}, %arg18: i32 {tt.divisibility = 16 : i32}, %arg19: i32 {tt.divisibility = 16 : i32}, %arg20: i32, %arg21: i32, %arg22: i32 {tt.divisibility = 16 : i32}) {
    %c128_i32 = arith.constant 128 : i32
    %cst = arith.constant dense<0xFF800000> : tensor<128x128xf32>
    %cst_0 = arith.constant dense<0> : tensor<128x128xi32>
    %cst_1 = arith.constant dense<195948557> : tensor<1x128xi32>
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<128x128xf32>
    %c128 = arith.constant 128 : index
    %c0 = arith.constant 0 : index
    %c1_i32 = arith.constant 1 : i32
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<128x64xf32>
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<128xf32>
    %cst_5 = arith.constant dense<0xFF800000> : tensor<128xf32>
    %0 = tt.get_program_id {axis = 0 : i32} : i32
    %1 = tt.get_program_id {axis = 1 : i32} : i32
    %2 = arith.muli %0, %c128_i32 : i32
    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32>
    %4 = tt.splat %2 : (i32) -> tensor<128xi32>
    %5 = arith.addi %4, %3 : tensor<128xi32>
    %6 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32>
    %7 = arith.muli %1, %arg9 : i32
    %8 = tt.expand_dims %5 {axis = 1 : i32} : (tensor<128xi32>) -> tensor<128x1xi32>
    %9 = tt.splat %arg10 : (i32) -> tensor<128x1xi32>
    %10 = arith.muli %8, %9 : tensor<128x1xi32>
    %11 = tt.splat %7 : (i32) -> tensor<128x1xi32>
    %12 = arith.addi %11, %10 : tensor<128x1xi32>
    %13 = tt.expand_dims %6 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32>
    %14 = tt.broadcast %12 : (tensor<128x1xi32>) -> tensor<128x64xi32>
    %15 = tt.broadcast %13 : (tensor<1x64xi32>) -> tensor<128x64xi32>
    %16 = arith.addi %14, %15 : tensor<128x64xi32>
    %17 = tt.expand_dims %3 {axis = 1 : i32} : (tensor<128xi32>) -> tensor<128x1xi32>
    %18 = tt.splat %arg13 : (i32) -> tensor<128x1xi32>
    %19 = arith.muli %17, %18 : tensor<128x1xi32>
    %20 = arith.addi %11, %19 : tensor<128x1xi32>
    %21 = tt.broadcast %20 : (tensor<128x1xi32>) -> tensor<128x64xi32>
    %22 = arith.addi %21, %15 : tensor<128x64xi32>
    %23 = arith.muli %17, %9 : tensor<128x1xi32>
    %24 = arith.addi %11, %23 : tensor<128x1xi32>
    %25 = tt.broadcast %24 : (tensor<128x1xi32>) -> tensor<128x64xi32>
    %26 = arith.addi %25, %15 : tensor<128x64xi32>
    %27 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>>
    %28 = tt.addptr %27, %16 : tensor<128x64x!tt.ptr<f16>>
    %29 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>>
    %30 = tt.splat %arg2 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>>
    %31 = tt.load %28 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x64xf16>
    %32 = arith.addi %0, %c1_i32 : i32
    %33 = arith.muli %32, %c128_i32 : i32
    %34 = arith.index_cast %33 : i32 to index
    %35 = tt.splat %arg3 : (f32) -> tensor<128x128xf32>
    %36 = tt.expand_dims %3 {axis = 0 : i32} : (tensor<128xi32>) -> tensor<1x128xi32>
    %37 = arith.addi %36, %cst_1 : tensor<1x128xi32>
    %38 = tt.broadcast %8 : (tensor<128x1xi32>) -> tensor<128x128xi32>
    %39 = tt.broadcast %37 : (tensor<1x128xi32>) -> tensor<128x128xi32>
    %40 = arith.cmpi sge, %38, %39 : tensor<128x128xi32>
    %41 = arith.sitofp %cst_0 : tensor<128x128xi32> to tensor<128x128xf32>
    %42 = select %40, %41, %cst : tensor<128x128xi1>, tensor<128x128xf32>
    %43:3 = scf.for %arg23 = %c0 to %34 step %c128 iter_args(%arg24 = %cst_3, %arg25 = %cst_4, %arg26 = %cst_5) -> (tensor<128x64xf32>, tensor<128xf32>, tensor<128xf32>) {
      %61 = arith.index_cast %arg23 : index to i32
      %62 = arith.muli %61, %arg13 : i32
      %63 = tt.splat %62 : (i32) -> tensor<128x64xi32>
      %64 = arith.addi %22, %63 : tensor<128x64xi32>
      %65 = tt.addptr %29, %64 : tensor<128x64x!tt.ptr<f16>>
      %66 = tt.load %65 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x64xf16>
      %67 = tt.dot %31, %66, %cst_2 {allowTF32 = true, transA = false, transB = true} : tensor<128x64xf16> * tensor<128x64xf16> -> tensor<128x128xf32>
      %68 = arith.mulf %67, %35 : tensor<128x128xf32>
      %69 = arith.addf %68, %42 : tensor<128x128xf32>
      %70 = tt.reduce %69 {axis = 1 : i32, redOp = 12 : i32} : tensor<128x128xf32> -> tensor<128xf32>
      %71 = tt.expand_dims %70 {axis = 1 : i32} : (tensor<128xf32>) -> tensor<128x1xf32>
      %72 = tt.broadcast %71 : (tensor<128x1xf32>) -> tensor<128x128xf32>
      %73 = arith.subf %69, %72 : tensor<128x128xf32>
      %74 = math.exp %73 : tensor<128x128xf32>
      %75 = tt.reduce %74 {axis = 1 : i32, redOp = 2 : i32} : tensor<128x128xf32> -> tensor<128xf32>
      %76 = arith.cmpf ogt, %arg26, %70 : tensor<128xf32>
      %77 = select %76, %arg26, %70 : tensor<128xi1>, tensor<128xf32>
      %78 = arith.subf %arg26, %77 : tensor<128xf32>
      %79 = math.exp %78 : tensor<128xf32>
      %80 = arith.subf %70, %77 : tensor<128xf32>
      %81 = math.exp %80 : tensor<128xf32>
      %82 = arith.mulf %79, %arg25 : tensor<128xf32>
      %83 = arith.mulf %81, %75 : tensor<128xf32>
      %84 = arith.addf %82, %83 : tensor<128xf32>
      %85 = arith.divf %81, %84 : tensor<128xf32>
      %86 = tt.expand_dims %85 {axis = 1 : i32} : (tensor<128xf32>) -> tensor<128x1xf32>
      %87 = tt.broadcast %86 : (tensor<128x1xf32>) -> tensor<128x128xf32>
      %88 = arith.mulf %74, %87 : tensor<128x128xf32>
      %89 = arith.divf %arg25, %84 : tensor<128xf32>
      %90 = arith.mulf %89, %79 : tensor<128xf32>
      %91 = tt.expand_dims %90 {axis = 1 : i32} : (tensor<128xf32>) -> tensor<128x1xf32>
      %92 = tt.broadcast %91 : (tensor<128x1xf32>) -> tensor<128x64xf32>
      %93 = arith.mulf %arg24, %92 : tensor<128x64xf32>
      %94 = arith.muli %61, %arg16 : i32
      %95 = tt.splat %94 : (i32) -> tensor<128x64xi32>
      %96 = arith.addi %26, %95 : tensor<128x64xi32>
      %97 = tt.addptr %30, %96 : tensor<128x64x!tt.ptr<f16>>
      %98 = tt.load %97 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x64xf16>
      %99 = arith.truncf %88 : tensor<128x128xf32> to tensor<128x128xf16>
      %100 = tt.dot %99, %98, %93 {allowTF32 = true, transA = false, transB = false} : tensor<128x128xf16> * tensor<128x64xf16> -> tensor<128x64xf32>
      scf.yield %100, %84, %77 : tensor<128x64xf32>, tensor<128xf32>, tensor<128xf32>
    }
    %44 = arith.muli %1, %arg22 : i32
    %45 = tt.addptr %arg5, %44 : !tt.ptr<f32>
    %46 = tt.splat %45 : (!tt.ptr<f32>) -> tensor<128x!tt.ptr<f32>>
    %47 = tt.addptr %46, %5 : tensor<128x!tt.ptr<f32>>
    %48 = tt.addptr %arg6, %44 : !tt.ptr<f32>
    %49 = tt.splat %48 : (!tt.ptr<f32>) -> tensor<128x!tt.ptr<f32>>
    %50 = tt.addptr %49, %5 : tensor<128x!tt.ptr<f32>>
    tt.store %47, %43#1 : tensor<128xf32>
    tt.store %50, %43#2 : tensor<128xf32>
    %51 = arith.muli %1, %arg18 : i32
    %52 = tt.splat %arg19 : (i32) -> tensor<128x1xi32>
    %53 = arith.muli %8, %52 : tensor<128x1xi32>
    %54 = tt.splat %51 : (i32) -> tensor<128x1xi32>
    %55 = arith.addi %54, %53 : tensor<128x1xi32>
    %56 = tt.broadcast %55 : (tensor<128x1xi32>) -> tensor<128x64xi32>
    %57 = arith.addi %56, %15 : tensor<128x64xi32>
    %58 = tt.splat %arg7 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>>
    %59 = tt.addptr %58, %57 : tensor<128x64x!tt.ptr<f16>>
    %60 = arith.truncf %43#0 : tensor<128x64xf32> to tensor<128x64xf16>
    tt.store %59, %60 : tensor<128x64xf16>
    return
  }
}
