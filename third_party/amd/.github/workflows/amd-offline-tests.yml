name: AMD Tests

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
      - triton-mlir

concurrency:
  group: ${{ format('{0}_amd', github.ref) }}
  cancel-in-progress: true

jobs:
  Runner-Preparation:
    runs-on: ubuntu-latest
    outputs:
      matrix-required: ${{ steps.set-matrix.outputs.matrix-required }}
    steps:
      - name: Prepare runner matrix
        id: set-matrix
        run: |
          if [ x"${{ github.repository }}" == x"ROCmSoftwarePlatform/triton" ]; then
            echo '::set-output name=matrix-required::[["self-hosted", "rocm"]]'
          else
            echo '::set-output name=matrix-required::["ubuntu-latest"]'
          fi

  Upstream-Tests:
    if: true
    needs: Runner-Preparation

    runs-on: ${{ matrix.runner }}

    strategy:
      matrix:
        runner: ${{fromJson(needs.Runner-Preparation.outputs.matrix-required)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Clear cache
        run: |
          rm -rf ~/.triton
          rm -rf python/triton.egg-info
          rm -rf python/.pytest_cache
          rm -rf python/tests/__pycache__
          rm -rf python/build
          rm -rf /tmp/tmp*
          rm -rf /tmp/triton_upstream
          rm -rf .pytest_cache
          rm -rf ./venv_triton_upstream

      - name: Update PATH
        run: |
          echo "PATH=${HOME}/.local/bin:${PATH}" >> "${GITHUB_ENV}"


      - name: Clean runner
        run: |
          pip3 uninstall -y triton

      - name: Set up Python Virtual Environment
        run: |
          python3 -m venv ./venv_triton_upstream
          source ./venv_triton_upstream/bin/activate
  
      - name: Install Dependencies
        run: |
          source ./venv_triton_upstream/bin/activate
          python -m pip install --upgrade pip
          python -m pip install ninja wheel pytest pytest-xdist numpy lit autopep8 flake8 isort
          python -m pip install scipy>=1.7.1
          python -m pip install cmake==3.24
          python -m pip install torch==1.13.1 --index-url https://download.pytorch.org/whl/rocm5.2 # important for detecting ROCM!
      
      - name: Check pre-commit
        # TODO: enable pre-commit tests
        if: false
        run: |
          python -m pip install --upgrade pre-commit
          python -m pre_commit run --all-files --verbose

      - name: Set branch name
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
          else
            echo "BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          fi

      - name: Build Upstream with Branch as Backend
        run: |
          source ./venv_triton_upstream/bin/activate
          set -x
          ROOT_DIR=`realpath "."`

          # get current branch
          BRANCH_NAME=${{ env.BRANCH_NAME }}
          echo $BRANCH_NAME
          
          # check out the upstream
          UPSTREAM_REPO_DIR=$ROOT_DIR/triton_upstream
          rm -rf $UPSTREAM_REPO_DIR
          git clone --recurse-submodules https://github.com/openai/triton $UPSTREAM_REPO_DIR
          cd $UPSTREAM_REPO_DIR
          git log -1 --pretty=format:"%H, %an, %ad, %s"
          
          # checkout backend in upstream
          cd $UPSTREAM_REPO_DIR/third_party
          rm -rf amd
          git clone --branch $BRANCH_NAME https://github.com/ROCmSoftwarePlatform/triton amd
          git add .
          git log -1 --pretty=format:"%H, %an, %ad, %s"
          
          # build upstream with this branch as a backend
          cd $UPSTREAM_REPO_DIR
          cd $UPSTREAM_REPO_DIR/python
          pip uninstall -y triton
          echo `pwd`
          python -m pip install -vvv -e .
         
      - name: Test Upstream
        run: |
          source ./venv_triton_upstream/bin/activate
          set -x
          ROOT_DIR=`realpath "."`
          cd $ROOT_DIR/triton_upstream
          git status
          pytest -n 32 --capture=tee-sys -rfs --verbose "python/test/unit/language/test_core.py"


  Docker-Test:
    if: true
    needs: Runner-Preparation

    runs-on: ${{ matrix.runner }}

    strategy:
      matrix:
        runner: ${{fromJson(needs.Runner-Preparation.outputs.matrix-required)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Clear cache
        run: |
          rm -rf ~/.triton
          rm -rf python/triton.egg-info
          rm -rf python/.pytest_cache
          rm -rf python/tests/__pycache__
          rm -rf python/build
          rm -rf /tmp/tmp*
          rm -rf /tmp/triton_upstream
          rm -rf .pytest_cache
          rm -rf ./venv_triton_upstream
      
      - name: Clear Docker images
        run: |
          docker stop triton_container || true && docker rm triton_container || true
          docker image prune -a -f

      - name: Update PATH
        run: |
          echo "PATH=${HOME}/.local/bin:${PATH}" >> "${GITHUB_ENV}"

      - name: Docker Test
        run: |
          set -x

          docker build -t triton .

          sudo docker run -it --rm --network=host --user root --group-add video --cap-add=SYS_PTRACE --security-opt seccomp=unconfined --ipc=host --shm-size 16G --device=/dev/kfd --device=/dev/dri -w /tmp/triton --name triton_container -d triton
          
          docker exec triton_container sh -c "python -m pytest -n 32 --capture=tee-sys -rfs --verbose "python/test/unit/language/test_core.py""
          
          docker stop triton_container


